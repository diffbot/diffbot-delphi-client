unit DiffbotIntf;

interface
uses Windows;

type
  IJsonArray = interface;

  IJsonObject = interface
    function Has(const name: string): Boolean;
    function AsBool(const name: string; defValue: Boolean = False): Boolean;
    function AsDouble(const name: string; defValue: Double = 0): Double;
    function AsInt(const name: string; defValue: Integer = 0): Integer;
    function AsString(const name: string; const defValue: string = ''): string;
    function AsDateTime(const name: string; defValue: TDateTime = 0): TDateTime;
    function AsObject(const name: string): IJsonObject;
    function AsArray(const name: string): IJsonArray;
    function AsVariant(const name: string): Variant;
  end;

  IJsonArray = interface
    function Length: Integer;
    function AsBool(index: Integer): Boolean;
    function AsDouble(index: Integer): Double;
    function AsInt(index: Integer): Integer;
    function AsString(index: Integer): string;
    function AsDateTime(index: Integer): TDateTime;
    function AsVariant(index: Integer): Variant;
    function AsObject(index: Integer): IJsonObject;
    function AsArray(index: Integer): IJsonArray;
  end;


  TDiffbotField = (
      /// <summary> Returns all fields available, including experimental fields. </summary>
      dfAll
      /// <summary> URL submitted. Returned by default. </summary>
    , dfUrl
      /// <summary> Returned if the resolving URL is different from the submitted URL (e.g., link shortening services). Returned by default. </summary>
    , dfResolvedUrl
      /// <summary> Page favicon. Returned by default. </summary>
    , dfIcon
      /// <summary> Returns the full contents of page meta tags, including sub-arrays for OpenGraph tags, Twitter Card metadata, schema.org microdata, and -- if available -- oEmbed metadata. Returned with fields. </summary>
    , dfMeta
      /// <summary> Returns the key/value pairs of the URL querystring, if present. Items without a value will be returned as "true." Returned with fields. </summary>
    , dfQueryString
      /// <summary> Returns all links (anchor tag href values) found on the page. Returned with fields. </summary>
    , dfLinks
//  This flag must and will be always set
//      /// <summary> Type of page -- always article. Returned by default. </summary>
//    , dfType
      /// <summary> Title of extracted article. Returned by default. </summary>
    , dfTitle
      /// <summary> Plain-text of the extracted article. Returned by default. </summary>
    , dfText
      /// <summary> HTML of the extracted article. Returned by default. </summary>
    , dfHtml
      /// <summary> Number of pages automatically concatenated to form the text or html response (By default, Diffbot will automatically concatenate multiple-page articles.) </summary>
    , dfNumPages
      /// <summary> Article date, normalized in most cases to GMT. Returned by default. </summary>
    , dfDate
      /// <summary> Article author. Returned by default. </summary>
    , dfAuthor
      /// <summary> Array of tags, automatically generated by Diffbot natural-language-processing. Returned with fields. </summary>
    , dfTags
      /// <summary> Returns the (spoken/human) language of the submitted URL, using two-letter ISO 639-1 nomenclature. Returned with fields. </summary>
    , dfLanguage
      /// <summary> Array of images, if present within the article body. Returned by default. </summary>
    , dfImages
          /// <summary> Direct (fully resolved) link to image. </summary>
        , dfImagesUrl
          /// <summary> Image width, in pixels. </summary>
        , dfImagesWidth
          /// <summary> Image height, in pixels. </summary>
        , dfImagesHeight
          /// <summary> Diffbot-determined best caption for the image, if detected. </summary>
        , dfImagesCaption
          /// <summary> Returns "true" if image is identified as primary based on visual analysis of the page. </summary>
        , dfImagesPrimary
      /// <summary> Array of videos, if present within the article body. Returned by default. </summary>
    , dfVideos
          /// <summary> Direct (fully resolved) link to image. </summary>
        , dfVideosUrl
          /// <summary> Image width, in pixels. </summary>
        , dfVideosWidth
          /// <summary> Image height, in pixels. </summary>
        , dfVideosHeight
          /// <summary> Diffbot-determined best caption for the image, if detected. </summary>
        , dfVideosCaption
          /// <summary> Returns "true" if image is identified as primary based on visual analysis of the page. </summary>
        , dfVideosPrimary
  );
  TDiffbotFields = set of TDiffbotField;

  TDiffbotAPI = (daUndefined, daArticle, daAudio, daChart, daDiscussion, daDocument, daDownload, daError,
      daEvent, daFaq, daFrontpage, daGame, daImage, daJob, daLocation, daProduct, daProfile, daRecipe,
      daReviewsList, daSerp, daVideo);

  TDiffbotMediaType = (dbmtUnknown, dbmtImage, dbmtVideo);

  TDiffbotMedia = record
    MediaType: TDiffbotMediaType;
    IsPrimary: Boolean;
    UrlLink: string;
    Size: TSize;
    Caption: string;
  end;
  TDiffbotMediaArray = array of TDiffbotMedia;

  TDiffbotStringArray = array of string;

  IDiffbotResponse = interface
  ['{365E93EC-DD82-450E-A36B-400C4D557F1B}']
    /// <summary> Type of page </summary>
    function API: TDiffbotAPI;
    /// <summary> URL submitted. Returned by default. </summary>
    function Url: string;
    /// <summary> Gets the raw response result in the JSON format. </summary>
    function Json: IJsonObject;
    /// <summary> Checks whether the parameter exists in the response result. </summary>
    function HasValue(const paramName: string): Boolean;
    /// <summary> Gets the simple parameter value. If parameter value doesn't exists or it is complex value (array or object) returns Unassigned.</summary>
    function AsVariant(const paramName: string): Variant;
    /// <summary> Gets the object parameter value as a JsonObject. If parameter value doesn't exists returns nil. If parameter value is not object) raises an exception.</summary>
    function AsObject(const paramName: string): IJsonObject;
    /// <summary> Gets the array parameter value as a JsonArray. If parameter value doesn't exists returns nil. If parameter value is not array) raises an exception.</summary>
    function AsArray(const paramName: string): IJsonArray;
    /// <summary> Gets the string parameter value. If parameter cannot be converted to string raises an exception.</summary>
    function AsString(const paramName: string; const defValue: string = ''): string;
    /// <summary> Gets the integer parameter value. If parameter cannot be converted to integer raises an exception.</summary>
    function AsInteger(const paramName: string; const defValue: Integer = 0): Integer;
    /// <summary> Gets the double parameter value. If parameter cannot be converted to double raises an exception.</summary>
    function AsDouble(const paramName: string; const defValue: Double = 0): Double;
    /// <summary> Gets the boolean parameter value. If parameter cannot be converted to boolean raises an exception.</summary>
    function AsBoolean(const paramName: string; const defValue: Boolean = false): Boolean;
    /// <summary> Gets the date and time parameter value. If parameter cannot be converted to date and time raises an exception.</summary>
    function AsDateTime(const paramName: string; const defValue: TDateTime = 0): TDateTime;
    /// <summary> Gets the string array value. If parameter cannot be converted to string array raises an exception.</summary>
    function AsStringArray(const paramName: string): TDiffbotStringArray;
  end;



  /// <summary>
  /// Base interface to get site content.
  /// </summary>
  IDiffbotBase = interface
  ['{53F82C92-55D2-42CE-8880-D7AEDF756C4E}']
    /// <summary>
    /// Gets which fields are applicable.
    /// </summary>
    function AcceptedFields: TDiffbotFields;
    /// <summary>
    /// Gets which fields are defaults.
    /// </summary>
    function DefaultFields: TDiffbotFields;

    // Request params
    function GetFields: TDiffbotFields;
    procedure SetFields(value: TDiffbotFields);

    function GetTimeout: Integer;
    procedure SetTimeout(value: Integer);

    function GetCallback: string;
    procedure SetCallback(const value: string);

    /// <summary>
    /// Used to control which fields are returned by the API. See the Response section below.
    /// </summary>
    property Fields: TDiffbotFields read GetFields write SetFields;

    /// <summary>
    /// Gets or sets a value in milliseconds to terminate the response. By default the Product API has no timeout.
    /// </summary>
    property Timeout: Integer read GetTimeout write SetTimeout;
    /// <summary>
    /// Use for jsonp requests. Needed for cross-domain ajax.
    /// </summary>
    property Callback: string read GetCallback write SetCallback;

    /// <summary>
    /// Performs loading from the defined url according preset request params
    /// </summary>
    function Load(const url: string): IDiffbotResponse;
  end;










  IDiffbotArticleResponse = interface(IDiffbotResponse)
  ['{B279ADE0-58AD-4CFB-89BB-2686EB3BA02A}']
    /// <summary> Returned if the resolving URL is different from the submitted URL (e.g., link shortening services). Returned by default. </summary>
    function ResolvedUrl: string;
    /// <summary> Page favicon. Returned by default. </summary>
    function IconUrl: string;
    /// <summary> Title of extracted article. Returned by default. </summary>
    function Title: string;
    /// <summary> Article author. Returned by default. </summary>
    function Author: string;
    /// <summary> Article date, normalized in most cases to GMT. Returned by default. </summary>
    function Date: TDateTime;
    /// <summary> Article of creation date, normalized in most cases to GMT. Returned by default. </summary>
    function DateCreated: TDateTime;
    /// <summary> Array of media (images or videos), if present within the article body. Returned by default. </summary>
    function Media: TDiffbotMediaArray;
    /// <summary> Array of tags, automatically generated by Diffbot natural-language-processing. Returned with fields. </summary>
    function Tags: TDiffbotStringArray;
    /// <summary> Array of all links (anchor tag href values) found on the page. Returned with fields. </summary>
    function Links: TDiffbotStringArray;
    /// <summary> Returns the (spoken/human) language of the submitted URL, using two-letter ISO 639-1 nomenclature. Returned with fields. </summary>
    function Language: string;
    /// <summary> Plain-text of the extracted article. Returned by default. </summary>
    function Text: string;
    /// <summary> HTML of the extracted article. Returned by default. </summary>
    function Html: string;
  end;

  /// <summary>
  /// Interface of the Article API.
  /// </summary>
  IDiffbotArticle = interface(IDiffbotBase)
  ['{6157F622-E164-45F5-A811-E288F254C95E}']
    /// <summary>
    /// Performs loading from the defined url according preset request params
    /// <param name="url">URL to classify</param>
    /// </summary>
    function Load(const url: string): IDiffbotArticleResponse;
  end;

  TDiffbotAnalyzeStatistics = array[TDiffbotAPI] of double;

  IDiffbotAnalyzeResponse = interface(IDiffbotResponse)
  ['{ED5F7916-976F-4E1E-986D-A15A93789566}']
    /// <summary> Returned if the resolving URL is different from the submitted URL (e.g., link shortening services). Returned by default. </summary>
    function ResolvedUrl: string;
    /// <summary> Title of extracted article. Returned by default. </summary>
    function Title: string;
    /// <summary> Returns the (spoken/human) language of the submitted URL, using two-letter ISO 639-1 nomenclature. Returned with fields. </summary>
    function Language: string;
    /// <summary> Returns statistics on page classification and extraction, including an array of individual page-types and the Diffbot-determined score (likelihood) for each type. </summary>
    function Stats: TDiffbotAnalyzeStatistics;
  end;

  /// <summary>
  /// Interface of the Analyze API.
  /// </summary>
  IDiffbotAnalyze = interface(IDiffbotBase)
  ['{300EC1E9-9560-4E2A-8911-576CAC334C2A}']
    /// <summary>
    /// Performs loading from the defined url according preset request params
    /// <param name="url">URL to classify</param>
    /// <param name="mode">By default the Page Classifier API will fully extract pages that match an existing Diffbot Automatic API. Set mode to a specific page-type (e.g., mode=article) to extract content only from that particular page-type. All others will simply return the page classification information.</param>
    /// <param name="getStats">Returns statistics on page classification and extraction, including an array of individual page-types and the Diffbot-determined score (likelihood) for each type.</param>
    /// </summary>
    function Load(const url: string; getStats: Boolean = False; mode: TDiffbotAPI = daUndefined): IDiffbotAnalyzeResponse;
  end;

const
  dfImagesAll : TDiffbotFields = [dfImagesUrl, dfImagesWidth, dfImagesHeight, dfImagesCaption, dfImagesPrimary];
  dfVideosAll : TDiffbotFields = [dfVideosUrl, dfVideosWidth, dfVideosHeight, dfVideosCaption, dfVideosPrimary];

  dfDefaultArticle : TDiffbotFields = [dfUrl, dfResolvedUrl, dfIcon, dfTitle, dfText, dfHtml, dfDate, dfAuthor, dfImages, dfVideos];

  dfDefaultAnalyze : TDiffbotFields = [dfUrl, dfResolvedUrl, dfTitle, dfLanguage];



function GetDiffbotArticle(const token: string; version: Integer = 2): IDiffbotArticle;

function GetDiffbotAnalyze(const token: string; version: Integer = 2): IDiffbotAnalyze;

function DiffbotApiToString(api: TDiffbotApi): string;
function StringToDiffbotApi(const typ: string): TDiffbotApi;

implementation
uses DiffbotObj;


function GetDiffbotArticle(const token: string; version: Integer = 2): IDiffbotArticle;
begin
  Result:= TDiffbotArticle.Create(token, version);
end;

function GetDiffbotAnalyze(const token: string; version: Integer = 2): IDiffbotAnalyze;
begin
  Result:= TDiffbotAnalyze.Create(token, version);
end;


function DiffbotApiToString(api: TDiffbotApi): string;
begin
  case api of
    daArticle: Result:= 'article';
    daAudio: Result:= 'audio';
    daChart: Result:= 'chart';
    daDiscussion: Result:= 'discussion';
    daDocument: Result:= 'document';
    daDownload: Result:= 'download';
    daError: Result:= 'error';
    daEvent: Result:= 'event';
    daFaq: Result:= 'faq';
    daFrontpage: Result:= 'frontpage';
    daGame: Result:= 'game';
    daImage: Result:= 'image';
    daJob: Result:= 'job';
    daLocation: Result:= 'location';
    daProduct: Result:= 'product';
    daProfile: Result:= 'profile';
    daRecipe: Result:= 'recipe';
    daReviewsList: Result:= 'reviewslist';
    daSerp: Result:= 'serp';
    daVideo: Result:= 'video';
  else
    Result:= '';
  end;
end;

function StringToDiffbotApi(const typ: string): TDiffbotApi;
begin
  if (typ = 'article') then Result:= daArticle
  else if (typ = 'audio') then Result:= daAudio
  else if (typ = 'chart') then Result:= daChart
  else if (typ = 'discussion') then Result:= daDiscussion
  else if (typ = 'document') then Result:= daDocument
  else if (typ = 'download') then Result:= daDownload
  else if (typ = 'error') then Result:= daError
  else if (typ = 'event') then Result:= daEvent
  else if (typ = 'faq') then Result:= daFaq
  else if (typ = 'frontpage') then Result:= daFrontpage
  else if (typ = 'game') then Result:= daGame
  else if (typ = 'image') then Result:= daImage
  else if (typ = 'job') then Result:= daJob
  else if (typ = 'location') then Result:= daLocation
  else if (typ = 'product') then Result:= daProduct
  else if (typ = 'profile') then Result:= daProfile
  else if (typ = 'recipe') then Result:= daRecipe
  else if (typ = 'reviewslist') then Result:= daReviewsList
  else if (typ = 'serp') then Result:= daSerp
  else if (typ = 'video') then Result:= daVideo
  else
    Result:= daUndefined;
end;

end.
