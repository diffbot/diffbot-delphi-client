unit DiffbotResponse;

interface
uses DiffbotIntf, Variants;

type
  { TDiffbotResponse }

  TDiffbotResponse = class(TInterfacedObject, IDiffbotResponse)
  private
    FJson: IJsonObject;
  public
    /// <summary> Type of page </summary>
    function API: TDiffbotAPI;
    /// <summary> URL submitted. Returned by default. </summary>
    function Url: string;
    /// <summary> Gets the raw responce result in the JSON format. </summary>
    function Json: IJsonObject;
    /// <summary> Checks whether the parameter exists in the response result. </summary>
    function HasValue(const paramName: string): Boolean;
    /// <summary> Gets the simple parameter value. If parameter value doesn't exists or it is complex value (array or object) returns Unassigned.</summary>
    function AsVariant(const paramName: string): Variant;
    /// <summary> Gets the object parameter value as a JsonObject. If parameter value doesn't exists returns nil. If parameter value is not object) raises an exception.</summary>
    function AsObject(const paramName: string): IJsonObject;
    /// <summary> Gets the array parameter value as a JsonArray. If parameter value doesn't exists returns nil. If parameter value is not array) raises an exception.</summary>
    function AsArray(const paramName: string): IJsonArray;
    /// <summary> Gets the string parameter value. If parameter cannot be converted to string raises an exception.</summary>
    function AsString(const paramName: string; const defValue: string = ''): string;
    /// <summary> Gets the integer parameter value. If parameter cannot be converted to integer raises an exception.</summary>
    function AsInteger(const paramName: string; const defValue: Integer = 0): Integer;
    /// <summary> Gets the double parameter value. If parameter cannot be converted to double raises an exception.</summary>
    function AsDouble(const paramName: string; const defValue: Double = 0): Double;
    /// <summary> Gets the boolean parameter value. If parameter cannot be converted to boolean raises an exception.</summary>
    function AsBoolean(const paramName: string; const defValue: Boolean = false): Boolean;
    /// <summary> Gets the date and time parameter value. If parameter cannot be converted to date and time raises an exception.</summary>
    function AsDateTime(const paramName: string; const defValue: TDateTime = 0): TDateTime;
    /// <summary> Gets the string array value. If parameter cannot be converted to string array raises an exception.</summary>
    function AsStringArray(const paramName: string): TDiffbotStringArray;
  public
    constructor Create(const responseJson: string);
    destructor Destroy; override;
  end;

  { TDiffbotArticleResponse }
  TDiffbotArticleResponse = class(TDiffbotResponse, IDiffbotArticleResponse)
  public
    /// <summary> Returned if the resolving URL is different from the submitted URL (e.g., link shortening services). Returned by default. </summary>
    function ResolvedUrl: string;
    /// <summary> Page favicon. Returned by default. </summary>
    function IconUrl: string;
    /// <summary> Title of extracted article. Returned by default. </summary>
    function Title: string;
    /// <summary> Article author. Returned by default. </summary>
    function Author: string;
    /// <summary> Article date, normalized in most cases to GMT. Returned by default. </summary>
    function Date: TDateTime;
    /// <summary> Article of creation date, normalized in most cases to GMT. Returned by default. </summary>
    function DateCreated: TDateTime;
    /// <summary> Array of media (images or videos), if present within the article body. Returned by default. </summary>
    function Media: TDiffbotMediaArray;
    /// <summary> Array of tags, automatically generated by Diffbot natural-language-processing. Returned with fields. </summary>
    function Tags: TDiffbotStringArray;
    /// <summary> Array of all links (anchor tag href values) found on the page. Returned with fields. </summary>
    function Links: TDiffbotStringArray;
    /// <summary> Returns the (spoken/human) language of the submitted URL, using two-letter ISO 639-1 nomenclature. Returned with fields. </summary>
    function Language: string;
    /// <summary> Plain-text of the extracted article. Returned by default. </summary>
    function Text: string;
    /// <summary> HTML of the extracted article. Returned by default. </summary>
    function Html: string;
(*
    /// <summary> Number of pages automatically concatenated to form the text or html response (By default, Diffbot will automatically concatenate multiple-page articles.) </summary>
    function NumPages: string;
    /// <summary> Returns the key/value pairs of the URL querystring, if present. Items without a value will be returned as "true." Returned with fields. </summary>
    function QueryString: TDictionary;
    /// <summary> Returns the full contents of page meta tags, including sub-arrays for OpenGraph tags, Twitter Card metadata, schema.org microdata, and -- if available -- oEmbed metadata. Returned with fields. </summary>
    function Metainfo: TDictionary;
*)
  end;


  { TDiffbotAnalyzeResponse }

  TDiffbotAnalyzeResponse = class(TDiffbotResponse, IDiffbotAnalyzeResponse)
  private
    FIsStatsCalculated: Boolean;
    FStats: TDiffbotAnalyzeStatistics;
  public
    /// <summary> Returned if the resolving URL is different from the submitted URL (e.g., link shortening services). Returned by default. </summary>
    function ResolvedUrl: string;
    /// <summary> Title of extracted article. Returned by default. </summary>
    function Title: string;
    /// <summary> Returns the (spoken/human) language of the submitted URL, using two-letter ISO 639-1 nomenclature. Returned with fields. </summary>
    function Language: string;
    /// <summary> Returns statistics on page classification and extraction, including an array of individual page-types and the Diffbot-determined score (likelihood) for each type. </summary>
    function Stats: TDiffbotAnalyzeStatistics;
  end;

implementation
uses DiffbotNetUtils, SysUtils, JsonObj;

{ TDiffbotResponse }

function TDiffbotResponse.AsBoolean(const paramName: string; const defValue: Boolean): Boolean;
begin
  Result:= Json.AsBool(paramName, defValue);
end;

function TDiffbotResponse.AsDateTime(const paramName: string; const defValue: TDateTime): TDateTime;
begin
  Result:= Json.AsDateTime(paramName, defValue);
end;

function TDiffbotResponse.AsDouble(const paramName: string; const defValue: Double): Double;
begin
  Result:= Json.AsDouble(paramName, defValue);
end;

function TDiffbotResponse.AsInteger(const paramName: string; const defValue: Integer): Integer;
begin
  Result:= Json.AsInt(paramName, defValue);
end;

function TDiffbotResponse.AsArray(const paramName: string): IJsonArray;
begin
  Result:= Json.AsArray(paramName);
end;

function TDiffbotResponse.AsObject(const paramName: string): IJsonObject;
begin
  Result:= Json.AsObject(paramName);
end;

function TDiffbotResponse.AsString(const paramName, defValue: string): string;
begin
  Result:= Json.AsString(paramName, defValue);
end;

function TDiffbotResponse.AsStringArray(const paramName: string): TDiffbotStringArray;
var
  i: integer;
  arr: IJsonArray;
begin
  arr:= AsArray(paramName);
  if (arr <> nil) then
  begin
    SetLength(Result, arr.length);
    for i:= 0 to arr.length - 1 do
      Result[i]:= arr.AsString(i);
  end else
    SetLength(Result, 0);
end;

function TDiffbotResponse.AsVariant(const paramName: string): Variant;
begin
  Result:= Json.AsVariant(paramName);
end;

constructor TDiffbotResponse.Create(const responseJson: string);
begin
  FJson:= TJSONObject.Create(responseJson);
end;

destructor TDiffbotResponse.Destroy;
begin
  inherited;
end;

function TDiffbotResponse.HasValue(const paramName: string): Boolean;
begin
  Result:= Json.Has(paramName);
end;

function TDiffbotResponse.Json: IJsonObject;
begin
  Result:= FJson;
end;

function TDiffbotResponse.API: TDiffbotAPI;
begin
  Result:= StringToDiffbotApi(FJson.AsString('type'));
end;

function TDiffbotResponse.Url: string;
begin
  Result:= AsString('url');
end;



{ TDiffbotArticleResponse }

function TDiffbotArticleResponse.Author: string;
begin
  Result:= AsString('author');
end;

function TDiffbotArticleResponse.Date: TDateTime;
begin
  Result:= AsDateTime('date');
end;

function TDiffbotArticleResponse.DateCreated: TDateTime;
begin
  Result:= AsDateTime('date_created');
end;

function TDiffbotArticleResponse.Html: string;
begin
  Result:= AsString('html');
end;

function TDiffbotArticleResponse.IconUrl: string;
begin
  Result:= AsString('icon');
end;

function TDiffbotArticleResponse.Language: string;
begin
  Result:= AsString('human_language');
end;

function GetMediaFromJson(mediaType: TDiffbotMediaType; json: IJsonObject): TDiffbotMedia; overload;
begin
  FillChar(Result, SizeOf(Result), #0);
  Result.MediaType:= mediaType;
  if json.has('primary') then Result.IsPrimary:= json.AsBool('primary');
  if json.has('url') then Result.UrlLink:= json.AsString('url');
  if json.has('pixelWidth') then Result.Size.cx:= json.AsInt('pixelWidth');
  if json.has('pixelHeight') then Result.Size.cy:= json.AsInt('pixelHeight');
  if json.has('caption') then Result.Caption:= json.AsString('caption');
end;

function GetMediaFromJson(json: IJsonObject): TDiffbotMedia; overload;
begin
  FillChar(Result, SizeOf(Result), #0);
  if json.Has('type') then
  begin
    if json.AsString('type') = 'image' then Result.MediaType:= dbmtImage
    else if json.AsString('type') = 'video' then Result.MediaType:= dbmtVideo;
  end;
  if json.has('primary') then Result.IsPrimary:= json.AsBool('primary');
  if json.has('link') then Result.UrlLink:= json.AsString('link');
  if json.has('pixelWidth') then Result.Size.cx:= json.AsInt('pixelWidth');
  if json.has('pixelHeight') then Result.Size.cy:= json.AsInt('pixelHeight');
  if json.has('caption') then Result.Caption:= json.AsString('caption');
end;

function TDiffbotArticleResponse.Media: TDiffbotMediaArray;
var
  len, i: integer;
  images: IJsonArray;
  videos: IJsonArray;
  media: IJsonArray;
begin
  len:= 0;
  images:= AsArray('images');
  videos:= AsArray('videos');
  media:= AsArray('media');
  if (images <> nil) then len:= len + images.length;
  if (videos <> nil) then len:= len + videos.length;
  if (media <> nil) then len:= len + media.length;
  SetLength(Result, len);
  len:= 0;
  if (images <> nil) then
  begin
    for i:= 0 to images.length - 1 do
      Result[i]:= GetMediaFromJson(dbmtImage, images.AsObject(i));
    len:= len + images.length;
  end;
  if (videos <> nil) then
  begin
    for i:= 0 to videos.length - 1 do
      Result[i + len]:= GetMediaFromJson(dbmtVideo, videos.AsObject(i));
    len:= len + images.length;
  end;
  if (media <> nil) then
  begin
    for i:= 0 to media.length - 1 do
      Result[i + len]:= GetMediaFromJson(media.AsObject(i));
  end;
end;

function TDiffbotArticleResponse.ResolvedUrl: string;
begin
  Result:= AsString('resolved_url');
end;

function TDiffbotArticleResponse.Tags: TDiffbotStringArray;
begin
  Result:= AsStringArray('tags');
end;

function TDiffbotArticleResponse.Links: TDiffbotStringArray;
begin
  Result:= AsStringArray('links');
end;

function TDiffbotArticleResponse.Text: string;
begin
  Result:= AsString('text');
end;

function TDiffbotArticleResponse.Title: string;
begin
  Result:= AsString('title');
end;

{ TDiffbotAnalyzeResponse }

function TDiffbotAnalyzeResponse.Language: string;
begin
  Result:= AsString('human_language');
end;

function TDiffbotAnalyzeResponse.ResolvedUrl: string;
begin
  Result:= AsString('resolved_url');
end;

function TDiffbotAnalyzeResponse.Stats: TDiffbotAnalyzeStatistics;
var
  i: TDiffbotAPI;
  types: IJsonObject;
  total: Double;
begin
  if not FIsStatsCalculated then
  begin
    types:= AsObject('stats').AsObject('types');
    total:= 0;
    for i:= Low(FStats) to High(FStats) do
    begin
      FStats[i]:= types.AsDouble(DiffbotApiToString(i));
      total:= total + FStats[i];
    end;
//    FStats[Low(FStats)]:= total;
  end;
  Result:= FStats;
end;

function TDiffbotAnalyzeResponse.Title: string;
begin
  Result:= AsString('title');
end;

end.
